name: Conditional Docker Restore and Build

on:
  workflow_dispatch:
  push:
    branches:
      - main
      - 'feature/*'      

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # --- Step 1: Cache based on hash of build.props ---
      - name: Cache restore image marker
        id: cache-restore
        uses: actions/cache@v4
        with:
          path: .props-hash
          key: props-${{ hashFiles('Directory.Packages.props') }}

      # --- Step 2: Conditionally build & push restore image ---
      - name: Build and Push Restore Image
        if: steps.cache-restore.outputs.cache-hit != 'true'
        shell: pwsh
        run: |
          $imageName = "${{ secrets.DOCKERHUB_USERNAME }}/dotnet-testing-nugets"
          $tag = "latest"

          Write-Host "build.props changed — rebuilding restore image..."
          docker build -t "$imageName:$tag" -f Dockerfile.restore .

          Write-Host "Pushing restore image..."
          docker push "$imageName:$tag"

          # Create marker file to store in cache
          # New-Item -ItemType File -Path .props-hash -Force | Out-Null

      - name: Skip Restore Build
        if: steps.cache-restore.outputs.cache-hit == 'true'
        shell: pwsh
        run: |
          Write-Host "✅ No changes to build.props — skipping restore image rebuild."

      # --- Step 3: Always build main image using latest restore image ---
      - name: Build and Push Main Image
        shell: pwsh
        run: |
          $buildImage = "${{ secrets.DOCKERHUB_USERNAME }}/dotnet-testing"
          $tag = "latest"

          Write-Host "Building main Docker image $buildImage:$tag using latest restore image..."
          docker build -t "$buildImage:$tag" -f Dockerfile.build .

          Write-Host "Pushing main image..."
          docker push "$buildImage:$tag"

      - name: Confirm success
        shell: pwsh
        run: |
          Write-Host "✅ Workflow completed successfully!"
